librangetree
============
Lauri Kasanen <cand at gmx.com>

librangetree is a C++ template, implementing a 2d range tree for both
counting and reporting queries.

:numbered:

Intro
-----

So what's this and why would I need it?

It's a solution for a specific type of searches - those done on relatively
static data, in two dimensions.

.For example:
- Give me the names of all people between the ages 35-56 earning 20-50k
- How many cities exist between coordinates 56,67 and 77,89


What it looks like
------------------
.In-memory layout
image::example.png[]

In this example, we added three points to the tree:
(1, 0), (10, 0), and (100, 0).

As can be seen, any kind of range search can be efficiently answered from
this tree.

Performance
-----------

This was measured using the included benchmark, bench/countspeed, on a
Phenom II 2.8GHz.

----
Using 10 (10^1) points, creation took 26 us (0 ms)
        and 1M searches took 49985 us. (0.05 us/search)
Using 100 (10^2) points, creation took 49 us (0 ms)
        and 1M searches took 73406 us. (0.07 us/search)
Using 1000 (10^3) points, creation took 535 us (0 ms)
        and 1M searches took 118294 us. (0.12 us/search)
Using 10000 (10^4) points, creation took 6222 us (6 ms)
        and 1M searches took 279652 us. (0.28 us/search)
Using 100000 (10^5) points, creation took 72399 us (72 ms)
        and 1M searches took 867422 us. (0.87 us/search)
Using 1000000 (10^6) points, creation took 689253 us (689 ms)
        and 1M searches took 1923755 us. (1.92 us/search)
Using 10000000 (10^7) points, creation took 4857303 us (4857 ms)
        and 1M searches took 3013128 us. (3.01 us/search)
----

Where do I get it?
------------------

librangetree is open source, under the AGPLv3 license.

You can download it at http://librangetree.sourceforge.net/.

Commercial licensing is also available. Contact us for details.

Limits
------

.Limits
- Once created, it is read-only
- The maximum dataset it can hold is 2^32 (4 billion points)

TIP: If you need more, consider splitting your data at a higher
level.

- Creation is not thread-safe - searches are
- The coordinates must be integers of some size

FAQ
---

[qanda]
What are the search and space efficiencies?::

	The space usage is O(n log n), and the search efficiency is O(log^2
	n).

I hear fractional cascading enables O(log n) search?::

	True, but it would also nearly double the RAM use. This was
	considered too excessive. +
	+
	Using one million points on a 64-bit platform, the tree takes about
	430 mb of RAM currently.
